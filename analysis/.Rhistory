bpcat = ifelse(bp_sys >= 120 & bp_sys < 130 & bp_dias < 80, 2, bpcat),
bpcat = ifelse(bp_sys >= 130 & bp_dias >= 90, 3, bpcat),
bpcat = ifelse(is.na(bpcat), 4, bpcat),
bpcat = fct_case_when(
bpcat == 1 ~ "Normal",
bpcat == 2 ~ "Elevated",
bpcat == 3 ~ "High",
bpcat == 4 ~ "Unknown",
TRUE ~ NA_character_
),
# Immunosuppression
immunosuppression_diagnosis_date = !is.na(immunosuppression_diagnosis_date),
immunosuppression_medication_date = !is.na(immunosuppression_medication_date),
immunosuppression = immunosuppression_diagnosis_date | immunosuppression_medication_date,
# Mental illness
sev_mental_ill = !is.na(sev_mental_ill),
# Prior covid
prior_covid_cat = !is.na(pmin(prior_positive_test_date,
prior_primary_care_covid_case_date,
prior_covidadmitted_date,
na.rm=TRUE))
) %>%
droplevels() %>%
mutate(
# converts TRUE/FALSE to 1/0
across(
where(is.logical),
~.x*1L
)
)
# apply dummy data script if not running in the server
if(Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")){
source(here::here("analysis", "dummy_data.R"))
# add binary flag to signal whether dummy data processing steps have been applied
data_processed$mock_data_flag=1
} else {
data_processed$mock_data_flag=0
}
# linearise the vaccination dates of each individual, then determine the product and index for each dose
data_vax <- local({
data_vax_pfizer <- data_processed %>%
select(patient_id, matches("pfizer\\_date\\_\\d+")) %>%
pivot_longer(
cols = -patient_id,
values_to = "date",
values_drop_na = TRUE
) %>%
arrange(patient_id, date) %>%
mutate(type = "pfizer") %>%
select(-name)
data_vax_az <- data_processed %>%
select(patient_id, matches("az\\_date\\_\\d+")) %>%
pivot_longer(
cols = -patient_id,
values_to = "date",
values_drop_na = TRUE
) %>%
arrange(patient_id, date) %>%
mutate(type = "az") %>%
select(-name)
data_vax_moderna <- data_processed %>%
select(patient_id, matches("moderna\\_date\\_\\d+")) %>%
pivot_longer(
cols = -patient_id,
values_to = "date",
values_drop_na = TRUE
) %>%
arrange(patient_id, date) %>%
mutate(type = "moderna") %>%
select(-name)
data_vax <- rbind(data_vax_pfizer, data_vax_az, data_vax_moderna) %>%
arrange(patient_id, date) %>%
group_by(patient_id) %>%
mutate(
vax_index=row_number(),
n_vax=max(row_number())
) %>%
ungroup()
data_vax
})
# pivot to wide-form table that lists dates and products for up to 4 sequential doses
data_vax_wide = data_vax %>%
pivot_wider(
id_cols= patient_id,
names_from = c("vax_index"),
values_from = c("date", "type"),
names_glue = "covid_vax_{vax_index}_{.value}"
)
# pick out vaccine count for each individual, then merge
data_vax_count = data_vax[!duplicated(data_vax$patient_id),c("patient_id", "n_vax")]
data_vax_wide = data_vax_wide %>% left_join(data_vax_count, by ="patient_id")
# merge with full data-set
data_processed_updated <- data_processed %>%
left_join(data_vax_wide, by ="patient_id") %>%
mutate(
vax1_type = covid_vax_1_type,
vax2_type = covid_vax_2_type,
vax3_type = covid_vax_3_type,
vax4_type = covid_vax_4_type,
vax12_type = paste0(vax1_type, "-", vax2_type),
vax123_type = paste0(vax12_type, "-", vax3_type),
# add new descriptor variables with formal product names
vax1_type_descr = fct_case_when(
vax1_type == "pfizer" ~ "BNT162b2",
vax1_type == "az" ~ "ChAdOx1",
vax1_type == "moderna" ~ "Moderna",
TRUE ~ NA_character_
),
vax2_type_descr = fct_case_when(
vax2_type == "pfizer" ~ "BNT162b2",
vax2_type == "az" ~ "ChAdOx1",
vax2_type == "moderna" ~ "Moderna",
TRUE ~ NA_character_
),
vax3_type_descr = fct_case_when(
vax3_type == "pfizer" ~ "BNT162b2",
vax3_type == "az" ~ "ChAdOx1",
vax3_type == "moderna" ~ "Moderna",
TRUE ~ NA_character_
),
vax4_type_descr = fct_case_when(
vax4_type == "pfizer" ~ "BNT162b2",
vax4_type == "az" ~ "ChAdOx1",
vax4_type == "moderna" ~ "Moderna",
TRUE ~ NA_character_
),
vax1_date = covid_vax_1_date,
vax2_date = covid_vax_2_date,
vax3_date = covid_vax_3_date,
vax4_date = covid_vax_4_date,
# Calculate time between vaccinations
tbv1_2 = as.numeric(vax2_date - vax1_date),
tbv2_3 = as.numeric(vax3_date - vax2_date),
tbv3_4 = as.numeric(vax4_date - vax3_date)
) %>%
# Remove unneccessary variables including overall and product-specific dates (now replaced by vax{N}_date)
select(
-starts_with(c("covid_vax_", "pfizer_date_", "az_date_", "moderna_date_", "immunosuppression_"))
)
# remove type combinations if latter vaccine not administered
data_processed_updated$vax12_type[is.na(data_processed_updated$vax2_type)] = NA_character_
data_processed_updated$vax123_type[is.na(data_processed_updated$vax3_type)] = NA_character_
# set n_vax to 0 if none recorded
data_processed_updated$n_vax[is.na(data_processed_updated$n_vax)]=0
# Save dataset as .rds files ----
write_rds(data_processed_updated, here::here("output", "data", "data_processed.rds"), compress = "gz")
write_csv(data_processed_updated, here::here("output", "data", "data_processed.csv"))
## Import libraries ----
library('tidyverse')
library('lubridate')
library('here')
library('glue')
## Import custom user functions
source(here::here("analysis", "functions.R"))
## Import processed data ----
data_processed <- read_rds(here::here("output", "data", "data_processed.rds"))
# vaccine initiation dates
first_pfizer = as_date("2020-12-08")
first_az = as_date("2021-01-04")
first_moderna = as_date("2021-04-13")
data_processed$ckd_inclusion_any
sum(is.na(data_processed$ckd_inclusion_any))
sum(is.na(data_processed$ckd_inclusion_strict))
## Import processed data ----
data_processed <- read_rds(here::here("output", "data", "data_processed.rds"))
# vaccine initiation dates
first_pfizer = as_date("2020-12-08")
first_az = as_date("2021-01-04")
first_moderna = as_date("2021-04-13")
data_processed$n_vax
table(data_processed$n_vax)
# # # # # # # # # # # # # # # # # # # # #
# This script:
# imports processed data
# filters out people who are excluded from the main analysis
# outputs inclusion/exclusions flowchart data
# # # # # # # # # # # # # # # # # # # # #
# Preliminaries ----
## Import libraries ----
library('tidyverse')
library('lubridate')
library('here')
library('glue')
## Import custom user functions
source(here::here("analysis", "functions.R"))
## Import processed data ----
data_processed <- read_rds(here::here("output", "data", "data_processed.rds"))
# vaccine initiation dates
first_pfizer = as_date("2020-12-08")
first_az = as_date("2021-01-04")
first_moderna = as_date("2021-04-13")
# Define selection criteria ----
data_criteria <- data_processed %>%
transmute(
patient_id,
has_ckd_any = ckd_inclusion_any==1,
has_ckd_strict = ckd_inclusion_strict==1,
has_age = !is.na(age) & age >=16 & age<120,
has_sex = !is.na(sex),
has_imd = !is.na(imd),
has_ethnicity = !is.na(ethnicity),
has_region = !is.na(region),
#isnot_hscworker = !hscworker,
#isnot_carehomeresident = !care_home_combined,
#isnot_endoflife = !endoflife,
#isnot_housebound = !housebound,
has_max_4_vax = n_vax <= 4, # maximum of 4 recorded doses
has_vaxgap12 = tbv1_2 >= 14 | is.na(vax2_date), # at least 14 days between dose 1 and dose 2 if dose 2 given
has_vaxgap23 = tbv2_3 >= 14 | is.na(vax3_date), # at least 14 days between dose 2 and dose 3 if dose 3 given
has_vaxgap34 = tbv3_4 >= 14 | is.na(vax4_date), # at least 14 days between dose 3 and dose 4 f dose 3 given
#has_knownvax1 = vax1_type %in% c("pfizer", "az", "moderna"),
#has_knownvax2 = vax2_type %in% c("pfizer", "az", "moderna"),
#has_knownvax3 = vax3_type %in% c("pfizer", "az", "moderna"),
#has_knownvax4 = vax4_type %in% c("pfizer", "az", "moderna"),
include = (
#jcvi_group_6orhigher & # temporary until more data available
has_ckd_any & has_age &
has_ckd_strict &
has_sex & has_imd & has_ethnicity & has_region &
has_max_4_vax &
has_vaxgap12 & has_vaxgap23 & has_vaxgap34
)
)
data_cohort <- data_criteria %>%
filter(include) %>%
select(patient_id) %>%
left_join(data_processed, by="patient_id") %>%
select(-ckd_inclusion) %>%
droplevels()
write_rds(data_cohort, here("output", "data", "data_cohort.rds"), compress="gz")
write_csv(data_cohort, here::here("output", "data", "data_cohort.csv"))
data_flowchart <- data_criteria %>%
transmute(
c0 = has_age & has_ckd,
c1 = c0 & has_ckd_strict,
c2 = c1 & (has_sex & has_imd & has_ethnicity & has_region),
c3 = c2 & (has_max_4_vax),
c4 = c3 & (has_vaxgap12 & has_vaxgap23 & has_vaxgap34)
) %>%
summarise(
across(.fns=sum)
) %>%
pivot_longer(
cols=everything(),
names_to="criteria",
values_to="n"
) %>%
mutate(
n_exclude = lag(n) - n,
pct_exclude = n_exclude/lag(n),
pct_all = n / first(n),
pct_step = n / lag(n),
crit = str_extract(criteria, "^c\\d+"),
criteria = fct_case_when(
crit == "c0" ~ "Aged 16+ with eGFR<60 in 2 years before 01 Dec 2020 or dialysis code, kidney transplant code, CKD diagnostic code, or CKD3-5 code", # paste0("Aged 18+\n with 2 doses on or before ", format(study_dates$lastvax2_date, "%d %b %Y")),
crit == "c1" ~ "  with eGFR<60 or dialysis/kidney transplant code",
crit == "c2" ~ "  with no missing demographic information",
crit == "c3" ~ "  with maximum of 4 doses recorded",
crit == "c4" ~ "  with no vaccines administered at an interval of <14 days",
TRUE ~ NA_character_
)
)
write_csv(data_flowchart, here::here("output", "data", "flowchart.csv"))
## Import libraries ----
library('tidyverse')
library('lubridate')
library('here')
library('glue')
## Import custom user functions
source(here::here("analysis", "functions.R"))
## Import processed data ----
data_processed <- read_rds(here::here("output", "data", "data_processed.rds"))
# vaccine initiation dates
first_pfizer = as_date("2020-12-08")
first_az = as_date("2021-01-04")
first_moderna = as_date("2021-04-13")
# Define selection criteria ----
data_criteria <- data_processed %>%
transmute(
patient_id,
has_ckd_any = ckd_inclusion_any==1,
has_ckd_strict = ckd_inclusion_strict==1,
has_age = !is.na(age) & age >=16 & age<120,
has_sex = !is.na(sex),
has_imd = !is.na(imd),
has_ethnicity = !is.na(ethnicity),
has_region = !is.na(region),
#isnot_hscworker = !hscworker,
#isnot_carehomeresident = !care_home_combined,
#isnot_endoflife = !endoflife,
#isnot_housebound = !housebound,
has_max_4_vax = n_vax <= 4, # maximum of 4 recorded doses
has_vaxgap12 = tbv1_2 >= 14 | is.na(vax2_date), # at least 14 days between dose 1 and dose 2 if dose 2 given
has_vaxgap23 = tbv2_3 >= 14 | is.na(vax3_date), # at least 14 days between dose 2 and dose 3 if dose 3 given
has_vaxgap34 = tbv3_4 >= 14 | is.na(vax4_date), # at least 14 days between dose 3 and dose 4 f dose 3 given
#has_knownvax1 = vax1_type %in% c("pfizer", "az", "moderna"),
#has_knownvax2 = vax2_type %in% c("pfizer", "az", "moderna"),
#has_knownvax3 = vax3_type %in% c("pfizer", "az", "moderna"),
#has_knownvax4 = vax4_type %in% c("pfizer", "az", "moderna"),
include = (
#jcvi_group_6orhigher & # temporary until more data available
has_ckd_any & has_age &
has_ckd_strict &
has_sex & has_imd & has_ethnicity & has_region &
has_max_4_vax &
has_vaxgap12 & has_vaxgap23 & has_vaxgap34
)
)
data_cohort <- data_criteria %>%
filter(include) %>%
select(patient_id) %>%
left_join(data_processed, by="patient_id") %>%
select(-ckd_inclusion) %>%
droplevels()
data_cohort <- data_criteria %>%
filter(include) %>%
select(patient_id) %>%
left_join(data_processed, by="patient_id") %>%
select(-ckd_inclusion_any, ckd_inclusion_strict) %>%
droplevels()
names(data_cohort)
names(data_cohort)
data_cohort <- data_criteria %>%
filter(include) %>%
select(patient_id) %>%
left_join(data_processed, by="patient_id") %>%
select(-c(ckd_inclusion_any, ckd_inclusion_strict)) %>%
droplevels()
names(data_cohort)
data_cohort <- data_criteria %>%
filter(include) %>%
select(patient_id) %>%
left_join(data_processed, by="patient_id") %>%
select(-c(ckd_inclusion_any, ckd_inclusion_strict)) %>%
droplevels()
write_rds(data_cohort, here("output", "data", "data_cohort.rds"), compress="gz")
write_csv(data_cohort, here::here("output", "data", "data_cohort.csv"))
data_flowchart <- data_criteria %>%
transmute(
c0 = has_age & has_ckd,
c1 = c0 & has_ckd_strict,
c2 = c1 & (has_sex & has_imd & has_ethnicity & has_region),
c3 = c2 & (has_max_4_vax),
c4 = c3 & (has_vaxgap12 & has_vaxgap23 & has_vaxgap34)
) %>%
summarise(
across(.fns=sum)
) %>%
pivot_longer(
cols=everything(),
names_to="criteria",
values_to="n"
) %>%
mutate(
n_exclude = lag(n) - n,
pct_exclude = n_exclude/lag(n),
pct_all = n / first(n),
pct_step = n / lag(n),
crit = str_extract(criteria, "^c\\d+"),
criteria = fct_case_when(
crit == "c0" ~ "Aged 16+ with eGFR<60 in 2 years before 01 Dec 2020 or dialysis code, kidney transplant code, CKD diagnostic code, or CKD3-5 code", # paste0("Aged 18+\n with 2 doses on or before ", format(study_dates$lastvax2_date, "%d %b %Y")),
crit == "c1" ~ "  with eGFR<60 or dialysis/kidney transplant code",
crit == "c2" ~ "  with no missing demographic information",
crit == "c3" ~ "  with maximum of 4 doses recorded",
crit == "c4" ~ "  with no vaccines administered at an interval of <14 days",
TRUE ~ NA_character_
)
)
data_flowchart <- data_criteria %>%
transmute(
c0 = has_age & has_ckd_any,
c1 = c0 & has_ckd_strict,
c2 = c1 & (has_sex & has_imd & has_ethnicity & has_region),
c3 = c2 & (has_max_4_vax),
c4 = c3 & (has_vaxgap12 & has_vaxgap23 & has_vaxgap34)
) %>%
summarise(
across(.fns=sum)
) %>%
pivot_longer(
cols=everything(),
names_to="criteria",
values_to="n"
) %>%
mutate(
n_exclude = lag(n) - n,
pct_exclude = n_exclude/lag(n),
pct_all = n / first(n),
pct_step = n / lag(n),
crit = str_extract(criteria, "^c\\d+"),
criteria = fct_case_when(
crit == "c0" ~ "Aged 16+ with eGFR<60 in 2 years before 01 Dec 2020 or dialysis code, kidney transplant code, CKD diagnostic code, or CKD3-5 code", # paste0("Aged 18+\n with 2 doses on or before ", format(study_dates$lastvax2_date, "%d %b %Y")),
crit == "c1" ~ "  with eGFR<60 or dialysis/kidney transplant code",
crit == "c2" ~ "  with no missing demographic information",
crit == "c3" ~ "  with maximum of 4 doses recorded",
crit == "c4" ~ "  with no vaccines administered at an interval of <14 days",
TRUE ~ NA_character_
)
)
write_csv(data_flowchart, here::here("output", "data", "flowchart.csv"))
## Import libraries
library('tidyverse')
library('here')
library('glue')
library('gt')
library('gtsummary')
library('reshape2')
## Create output directory
fs::dir_create(here::here("output", "tables"))
## Import data
data_processed <- read_rds(here::here("output", "data", "data_cohort.rds"))
## Format data
data_processed <- data_processed %>%
mutate(group = ifelse(care_home_65plus == 1, 1, NA),
group = ifelse(is.na(group) & ageband == 3, 2, group),
group = ifelse(is.na(group) & hscworker == 1, 3, group),
group = ifelse(is.na(group) & ageband == 2, 4, group),
group = ifelse(is.na(group) & shielded == 1, 5, group),
group = ifelse(is.na(group) & age >=50 & age <70, 6, group),
group = ifelse(is.na(group), 7, group),
group = factor(group),
ageband3 = cut(
age,
breaks = c(16, 50, 60, 70, 80, Inf),
labels = c("16-50", "50-59", "60-69", "70-79", "80+"),
right = FALSE)) %>%
group_by(patient_id) %>%
ungroup()
names(data_processed)
## Counts
counts0 <- data_processed %>%
mutate(time_between_vaccinations1_2 = cut(tbv1_2,
breaks = c(0, 42, 84, Inf),
labels = c("6 weeks or less", "6-12 weeks", "12 weeks or more"),
right = FALSE),
time_between_vaccinations2_3 = cut(tbv2_3,
breaks = c(0, 84, 168, Inf),
labels = c("12 weeks or less", "12-24 weeks", "24 weeks or more"),
right = FALSE),
smoking_status = ifelse(is.na(smoking_status), "N&M", smoking_status)) %>%
select(ageband3,
sex,
bmi,
smoking_status,
ethnicity,
imd,
region,
asthma,
asplenia,
bpcat,
cancer,
diabetes,
chd,
haem_cancer,
immunosuppression,
dialysis,
kidney_transplant,
chronic_kidney_disease_diagnostic,
chronic_kidney_disease_stages_3_5,
learning_disability,
cld,
chronic_neuro_dis_inc_sig_learn_dis,
chronic_resp_dis,
dialysis,
sev_mental_ill,
organ_transplant,
non_kidney_transplant,
time_between_vaccinations1_2,
time_between_vaccinations2_3,
prior_covid_cat) %>%
tbl_summary()
counts0$inputs$data <- NULL
table1 <- counts0$table_body %>%
select(group = variable, variable = label, count = stat_0) %>%
separate(count, c("count","perc"), sep = "([(])") %>%
mutate(count = gsub(" ", "", count),
count = as.numeric(gsub(",", "", count))) %>%
filter(!(is.na(count))) %>%
select(-perc) %>%
filter(!(group == "prior_covid_cat" & variable == "Unknown"))
table1$percent = round(table1$count/nrow(data_processed)*100,1)
colnames(table1) = c("Group", "Variable", "Count", "Percent")
## Redact values < 8
threshold = 8
table1_redacted <- table1 %>%
mutate(Count = ifelse(Count < threshold, NA, as.numeric(Count)),
Percent = ifelse(is.na(Count), NA, Percent))
## Round to nearest 5
table1_redacted <- table1_redacted %>%
mutate(Count = plyr::round_any(Count, 5))
table1_redacted$Percent = round(table1_redacted$Count/nrow(data_processed)*100,1)
# Save as html ----
gt::gtsave(gt(table1_redacted), here::here("output","tables", "table1_redacted.html"))
formatC(round_any(nrow(data_cohort),5), big.mark=",")
knitr::opts_chunk$set(echo = FALSE)
## Import libraries
library('tidyverse')
library('here')
library('glue')
library('gt')
library('gtsummary')
library('reshape2')
library('plyr')
library('kableExtra')
## Import custom user functions
source(here::here("analysis", "functions.R"))
## Create output directory
fs::dir_create(here::here("output", "tables"))
## Import data
data_cohort <- read_rds(here::here("output", "data", "data_cohort.rds"))
if (data_cohort$mock_data_flag[1]==1) { flag = "present" } else { flag = "absent" }
formatC(nrow(data_cohort), big.mark=",")
